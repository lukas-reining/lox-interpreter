var startMeasurement = clock();

var a = "global a";
var b = "global b";
var c = "global c";

printStackDepth();
{
  printStackDepth();
  var a = "outer a";
  var b = "outer b";
  {
    printStackDepth();
    var a = "inner a";
    print a;
    print b;
    print c;
  }
  printStackDepth();
  print a;
  print b;
  print c;
}
printStackDepth();

print a;
print b;
print c;

print "hi" or 2; // "hi".
print nil or "yes"; // "yes".

var i = 0;
while (i < 10) {
  print i;
  i = i + 1;
}

var a = 0;
var temp;

// FIB
for (var b = 1; a < 1000; b = temp + b) {
  print a;
  temp = a;
  a = b;
}

fun sayHi(first, last) {
  printStackDepth();
  print "Hi, " + first + " " + last + "!";
}

printStackDepth();
sayHi("Dear", "Reader");


fun procedure() {
  print "don't return anything";
}

var result = procedure();


fun add(a, b) {
  return a + b;
}

print add(3, 4);

fun fib(n) {
  if (n <= 1) return n;
  return fib(n - 2) + fib(n - 1);
}

for (var i = 0; i < 20; i = i + 1) {
  print fib(i);
}

fun makeCounter() {
  var i = 0;

  fun count() {
    i = i + 1;
    print i;
  }

  return count;
}

var counter = makeCounter();
counter(); // "1".
counter(); // "2".


var a = "global";
{
  fun showA() {
    print a;
  }

  showA();
  var a = "block";
  showA();
}

class DevonshireCream {
  serveOn() {
    return "Scones";
  }
}

print DevonshireCream;

class Bagel {}
var bagel = Bagel();
print bagel; // Prints "Bagel instance".

bagel.topping = "Cream";
print bagel.topping;

class Bacon {
  eat() {
    print "Crunch crunch crunch!";
  }
}

print Bacon().eat;

Bacon().eat(); // Prints "Crunch crunch crunch!".

class Thing {
  getCallback() {
    fun localFunction() {
      print this;
    }

    return localFunction;
  }
}

print Thing().getCallback();
var callback = Thing().getCallback();
callback();

class Foo {
  init(num) {
    print "a";
    this.number = num;
    return;
    print "b";
  }

  add(number) {
    return this.number + number;
  }

  getCallback(num) {
     fun localFunction() {
       print this;
       return this.number + num;
     }

     return localFunction;
   }
}

var foo = Foo(7);
print foo.add(10);
print foo.getCallback(10)();

print env;
var endMeasurement = clock();

print "Execution took " + (endMeasurement - startMeasurement) + " microseconds";
